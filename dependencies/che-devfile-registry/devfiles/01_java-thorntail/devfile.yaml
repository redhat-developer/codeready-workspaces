---
apiVersion: 1.0.0
metadata:
  generateName: java-thorntail-
projects:
  -
    name: rest-http-redhat
    source:
      type: git
      location: "https://github.com/thorntail-examples/rest-http-redhat"
components:
  -
    type: chePlugin
    id: redhat/java8/latest
  -
    # NOTE: instead of the old stack-analysis script, should be able to use the latest dependency-analysis plugin instead
    type: chePlugin
    id: redhat/dependency-analytics/latest
  -
    type: dockerimage
    alias: maven
    # image: quay.io/crw/plugin-java8-rhel8:2.3
    image: registry.redhat.io/codeready-workspaces/plugin-java8-rhel8:2.3
    env:
      - name: JAVA_OPTS
        value: "-XX:MaxRAMPercentage=50.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom -Duser.home=/home/jboss"
      - name: MAVEN_OPTS
        value: $(JAVA_OPTS)
    memoryLimit: 768Mi
    endpoints:
      - name: '8080'
        port: 8080
    mountSources: true
    volumes:
      - name: m2
        containerPath: /home/jboss/.m2
commands:
  -
    name: 1. Build
    actions:
      -
        type: exec
        component: maven
        command: "MAVEN_OPTS='-Xmx200m' && mvn clean install -DskipTests"
        workdir: ${CHE_PROJECTS_ROOT}/rest-http-redhat
  -
    name: 2. Run
    actions:
      -
        type: exec
        component: maven
        command: "MAVEN_OPTS='-Xmx200m' && mvn clean install -DskipTests && java -jar target/*.jar -Djava.net.preferIPv4Stack=true"
        workdir: ${CHE_PROJECTS_ROOT}/rest-http-redhat
  -
    name: 3. Run in debug mode
    actions:
      -
        type: exec
        component: maven
        command: "MAVEN_OPTS='-Xmx200m' && mvn clean install -DskipTests && java -agentlib:jdwp=transport=dt_socket,address=5005,server=y,suspend=n -jar target/*.jar -Djava.net.preferIPv4Stack=true"
        workdir: ${CHE_PROJECTS_ROOT}/rest-http-redhat
  - 
    name: 4. Log into deployment cluster
    actions:
      - workdir: "${CHE_PROJECTS_ROOT}/rest-http-redhat"
        type: exec
        command: |
          echo
          echo "Before you can deploy this application to an openshift cluster,"
          echo "you must run 'oc login ...' in the maven terminal."
          echo
        component: maven
  -
    name: 5. Deploy to OpenShift
    actions:
      -
        type: exec
        component: maven
        command: "mvn fabric8:deploy -Popenshift -DskipTests"
        workdir: ${CHE_PROJECTS_ROOT}/rest-http-redhat
  -
    name: Debug (Attach)
    actions:
    - type: vscode-launch
      referenceContent: |
        {
        "version": "0.2.0",
        "configurations": [
        {
            "type": "java",
            "request": "attach",
            "name": "Debug (Attach)",
            "hostName": "localhost",
            "port": 5005
        }
        ]
        }
