#!/usr/bin/env groovy

// build params
//extensions - comma separated list of extensions

timeout(120) {
    node {
        cleanWs()
        stage 'build extensions'

        // key value map for
        def jobs = [:]

        checkout([$class: 'GitSCM',
            branches: [[name: "${branchToBuildCRW}"]],
            doGenerateSubmoduleConfigurations: false,
            poll: true,
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "crw"]],
            submoduleCfg: [],
            userRemoteConfigs: [[url: "https://github.com/redhat-developer/codeready-workspaces.git"]]])

        def extensionFiles = findFiles(glob: 'crw/dependencies/che-plugin-registry/v3/plugins/**/meta.yaml')

        extensionFiles.each { extensionFile ->
            def extensionYaml = readYaml file: ${extensionFile.getPath()}
            def extensionPath = extensionYaml.spec.extension
            echo "processing extension ${extensionPath}"
            if (extensionPath.contains("marketplace.visualstudio.com")) {
                def registryLocation = extensionPath.split("//")[1]
                echo "selected extension ${registryLocation}"

                // since there may be multiple plugins pointing to the same extension URL
                // we just need to buld them once
                if (jobs.containsKey(registryLocation)) {
                    echo "duplicated plugin ${registryLocation} omitted"
                    continue
                }

                def repository = extensionYaml.repository
                echo "${repository}"
                // parse extension URL to get the version of the plugin, which should be second to last
                def extensionName = extensionYaml.name

                // infering the branch from the version of the plugin in the extension URL
                // and prefixing with 'v'
                def branch = "v" + extensionPath.split("${extensionName}/")[1].split("/vspackage")[0]

                echo "${branch}"


                def buildjob = build job: 'vscode-extensions-packaging', parameters: [ string(name: 'extensionPath', value: repository), string(name: 'branchToBuildPlugin', value: branch) ]
                jobs.put(registryLocation, buildjob)
            }
        }

        jobs.each { fileLocation, job ->
            echo "archiving artifact at ${fileLocation}"
            copyArtifacts(projectName: 'vscode-extensions-packaging', selector: specific("${job.number}"), target: fileLocation)
        }

        sh "tar -cvf vscode-extensions-vsix.tar ."


        // TODO deploy artifact to pkgs.devel?

        archiveArtifacts artifacts: '*.tar', fingerprint: true
    }
}