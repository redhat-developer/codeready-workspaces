<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ADMIN_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">ADMIN_TOKEN</stringProp>
            <stringProp name="Argument.value">dummy_token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crw.host" elementType="Argument">
            <stringProp name="Argument.name">crw.host</stringProp>
            <stringProp name="Argument.value">${__P(crw.host,codeready-codeready.172.19.20.240.nip.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crw.sso.host" elementType="Argument">
            <stringProp name="Argument.name">crw.sso.host</stringProp>
            <stringProp name="Argument.value">${__P(crw.sso.host,rh-sso-codeready.172.19.20.240.nip.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crw.protocol" elementType="Argument">
            <stringProp name="Argument.name">crw.protocol</stringProp>
            <stringProp name="Argument.value">${__P(crw.protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crw.port" elementType="Argument">
            <stringProp name="Argument.name">crw.port</stringProp>
            <stringProp name="Argument.value">${__P(crw.port,80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="test.threads" elementType="Argument">
            <stringProp name="Argument.name">test.threads</stringProp>
            <stringProp name="Argument.value">${__P(test.threads,2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${test.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User_Defined_Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="WORKSPACE_NAME" elementType="Argument">
              <stringProp name="Argument.name">WORKSPACE_NAME</stringProp>
              <stringProp name="Argument.value">user-workspace</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="THRESHOLD_ATTEMPTS" elementType="Argument">
              <stringProp name="Argument.name">THRESHOLD_ATTEMPTS</stringProp>
              <stringProp name="Argument.value">180</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="user_counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">NUM_USER</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_admin_token_thread_${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">admin-cli</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">admin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">admin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/realms/master/protocol/openid-connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ADMIN_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_user_thread_${__threadNum}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;id&quot; : &quot;b07e3a58-ed50-4a6e-be17-fcf49ff8b242&quot;,&#xd;
    &quot;createdTimestamp&quot; : 1498139671076,&#xd;
    &quot;username&quot; : &quot;user${NUM_USER}&quot;,&#xd;
    &quot;enabled&quot; : true,&#xd;
    &quot;totp&quot; : false,&#xd;
    &quot;emailVerified&quot; : false,&#xd;
    &quot;firstName&quot; : &quot;firstUserName${NUM_USER}&quot;,&#xd;
    &quot;lastName&quot; : &quot;firstUserName${NUM_USER}&quot;,&#xd;
    &quot;email&quot; : &quot;user${__RandomString(5,qwertyuiopasdfghkl)}@admin.com&quot;,&#xd;
    &quot;credentials&quot; : [ {&#xd;
      &quot;type&quot; : &quot;password&quot;,&#xd;
      &quot;hashedSaltedValue&quot; : &quot;5RAyLGBHmVbAOPfvjm+IdGpvEOEJx98UwA0pGpPQHEk6BwYpOc8WL8TtB7MdJyGlEYVF/L3uGurfdbRmihlXrA==&quot;,&#xd;
      &quot;salt&quot; : &quot;dRvJ8IcAnfNiU5VMtuxuZQ==&quot;,&#xd;
      &quot;hashIterations&quot; : 20000,&#xd;
      &quot;counter&quot; : 0,&#xd;
      &quot;algorithm&quot; : &quot;pbkdf2&quot;,&#xd;
      &quot;digits&quot; : 0,&#xd;
      &quot;period&quot; : 0,&#xd;
      &quot;createdDate&quot; : 1498139677908,&#xd;
      &quot;config&quot; : { }&#xd;
    } ],&#xd;
    &quot;disableableCredentialTypes&quot; : [ &quot;password&quot; ],&#xd;
    &quot;requiredActions&quot; : [ ],&#xd;
    &quot;realmRoles&quot; : [&quot;uma_authorization&quot;, &quot;offline_access&quot; ],&#xd;
    &quot;clientRoles&quot; : {&#xd;
       &quot;account&quot; : [ &quot;manage-account&quot;, &quot;view-profile&quot; ]&#xd;
     },&#xd;
    &quot;groups&quot; : [ ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/admin/realms/codeready/users</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ADMIN_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_users_names_thread_${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/admin/realms/codeready/users?first=0&amp;max=25</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ADMIN_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">USER_NAME</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.username</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_as_user_thread_${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">codeready-public</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">user${NUM_USER}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">admin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/realms/codeready/protocol/openid-connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">USER_ACCESS_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create_workspace_thread_${__threadNum}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;defaultEnv&quot;: &quot;default&quot;,&#xd;
  &quot;environments&quot;: {&#xd;
    &quot;default&quot;: {&#xd;
      &quot;machines&quot;: {&#xd;
        &quot;dev-machine&quot;: {&#xd;
          &quot;attributes&quot;: {&#xd;
            &quot;memoryLimitBytes&quot;: &quot;1610612736&quot;&#xd;
          },&#xd;
          &quot;servers&quot;: {&#xd;
            &quot;eap&quot;: {&#xd;
              &quot;attributes&quot;: {},&#xd;
              &quot;port&quot;: &quot;8080&quot;,&#xd;
              &quot;protocol&quot;: &quot;http&quot;&#xd;
            },&#xd;
            &quot;eap-debug&quot;: {&#xd;
              &quot;attributes&quot;: {},&#xd;
              &quot;port&quot;: &quot;8000&quot;,&#xd;
              &quot;protocol&quot;: &quot;http&quot;&#xd;
            }&#xd;
          },&#xd;
          &quot;volumes&quot;: {},&#xd;
          &quot;installers&quot;: [&#xd;
            &quot;org.eclipse.che.exec&quot;,&#xd;
            &quot;org.eclipse.che.terminal&quot;,&#xd;
            &quot;org.eclipse.che.ws-agent&quot;,&#xd;
            &quot;org.eclipse.che.ls.java&quot;,&#xd;
            &quot;com.redhat.bayesian.lsp&quot;&#xd;
          ],&#xd;
          &quot;env&quot;: {}&#xd;
        }&#xd;
      },&#xd;
      &quot;recipe&quot;: {&#xd;
        &quot;type&quot;: &quot;dockerimage&quot;,&#xd;
        &quot;content&quot;: &quot;eclipse/ubuntu_jdk8&quot;&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;projects&quot;: [],&#xd;
  &quot;name&quot;: &quot;user-workspace&quot;,&#xd;
  &quot;attributes&quot;: {},&#xd;
  &quot;commands&quot;: [&#xd;
    {&#xd;
      &quot;commandLine&quot;: &quot;mvn clean install -f ${current.project.path}/pom.xml&quot;,&#xd;
      &quot;name&quot;: &quot;build&quot;,&#xd;
      &quot;attributes&quot;: {&#xd;
        &quot;goal&quot;: &quot;Build&quot;,&#xd;
        &quot;previewUrl&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;type&quot;: &quot;mvn&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;links&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/workspace?start-after-create=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_running_status_for_ws" enabled="true">
          <stringProp name="WhileController.condition">${IS_STATUS_RUNNING}</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${THRESHOLD_ATTEMPTS}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">CURRENT_ATTEMPT</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_workspace_status_after_creation_and_running_thread_${__threadNum}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
            <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/workspace</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">WORKSPACE_STATUS</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay_after_request_1sec" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223_assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def CURRENT_STATUS = (vars.get(&quot;WORKSPACE_STATUS&quot;))
if(!(CURRENT_STATUS.equals(&quot;RUNNING&quot;)||(CURRENT_STATUS.equals(&quot;STARTING&quot;)))){
vars.put(&quot;IS_STATUS_RUNNING&quot;, &quot;false&quot;)
AssertionResult.setFailure(true);
AssertionResult.setFailureMessage(&quot;The just created Workspace has unexpected status &quot; + CURRENT_STATUS);
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${CURRENT_ATTEMPT}&quot; == &quot;${THRESHOLD_ATTEMPTS}&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">AssertionResult.setFailure(true);
AssertionResult.setFailureMessage(&quot;the expected workspace status has been not achieved in maximum timeout&quot;);

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${WORKSPACE_STATUS}&quot; == &quot;RUNNING&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset_loop_if_ws_run_successful" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;IS_STATUS_RUNNING&quot;, &quot;false&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="StoreTimeWsCreation" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def testVar = &quot;WS_TIME_CREATION_BY_USER_&quot;+${__threadNum};
props.put(&quot;host&quot;, &quot;${crw.protocol}&quot; + &quot;//&quot; + &quot;${crw.host}&quot;);
props.put(testVar, &quot;${CURRENT_ATTEMPT}&quot;);
props.put(&quot;numberOfThreads&quot;, &quot;${__threadNum}&quot;);


</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_current_workspace_id_thread_${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/workspace</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON_Extractor_current_ws_id" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">CURRENT_WS_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_current_ws_state" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">WS_STATE_BEFORE_STOPPING</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.status</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${WS_STATE_BEFORE_STOPPING}&quot;!=&quot;STOPPED&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stop_workspace_thread_${__threadNum}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
            <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/workspace/${CURRENT_WS_ID}/runtime</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_stopping_ws" enabled="true">
          <stringProp name="WhileController.condition">${IS_WORKSPACE_STOPPED}</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${THRESHOLD_ATTEMPTS}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">CURRENT_ATTEMPT</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_workspace_status_for_stopping_thread_${__threadNum}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
            <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/workspace</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">WORKSPACE_STATUS</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay_after_request_1sec" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="is_ws_stopped_or_achived_threshold_thread_${__threadNum}" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">boolean IS_WORKSPACE_STOPPED=false
IS_WORKSPACE_STOPPED=!(vars.get(&apos;WORKSPACE_STATUS&apos;).equals(&apos;STOPPED&apos;) || vars.get(&apos;CURRENT_ATTEMPT&apos;).equals(vars.get(&apos;THRESHOLD_ATTEMPTS&apos;)))
vars.put(&quot;IS_WORKSPACE_STOPPED&quot;, String.valueOf(IS_WORKSPACE_STOPPED))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="remove_worksapce_thread_${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crw.host}</stringProp>
          <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/workspace/${CURRENT_WS_ID}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${USER_ACCESS_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="clean_up" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="delete_all_users_except_admin" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="refresh_token_thread" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">admin-cli</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
            <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/master/protocol/openid-connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ADMIN_TOKEN</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_user_ids_thread" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
            <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/admin/realms/codeready/users</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${ADMIN_TOKEN}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">USER_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="delete_users" enabled="true">
            <stringProp name="ForeachController.inputVal">USER_ID</stringProp>
            <stringProp name="ForeachController.returnVal">CURRENT_USER_ID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_user-role_thread" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
              <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/admin/realms/codeready/users/${CURRENT_USER_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ADMIN_TOKEN}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">USER_NAME</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">username</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="is_admin" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${USER_NAME}&quot;!=&quot;admin&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete_user_thread" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${crw.sso.host}</stringProp>
                <stringProp name="HTTPSampler.port">${crw.port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${crw.protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/auth/admin/realms/codeready/users/${CURRENT_USER_ID}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${ADMIN_TOKEN}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateReport" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.io.FileWriter;
 
StringBuilder stringBuilder = new StringBuilder();
List &lt;Integer&gt; values = new ArrayList();
String numberOfThreads = props.get(&quot;numberOfThreads&quot;);
String host = props.get(&quot;host&quot;);
String date = &quot;${__time(d-MMM-yyyy hh:mm:ss)}&quot;;
Integer sum=0;

String style = &quot;@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700,300,100);\n&quot; +
                       &quot;\n&quot; +
                       &quot;body {\n&quot; +
                       &quot;  background-color: #3e94ec;\n&quot; +
                       &quot;  font-family: \&quot;Roboto\&quot;, helvetica, arial, sans-serif;\n&quot; +
                       &quot;  font-size: 16px;\n&quot; +
                       &quot;  font-weight: 400;\n&quot; +
                       &quot;  text-rendering: optimizeLegibility;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;div.table-title {\n&quot; +
                       &quot;   display: block;\n&quot; +
                       &quot;  margin: auto;\n&quot; +
                       &quot;  max-width: 800px;\n&quot; +
                       &quot;  padding:5px;\n&quot; +
                       &quot;  width: 100%;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;.table-title h3 {\n&quot; +
                       &quot;   color: #fafafa;\n&quot; +
                       &quot;   font-size: 26px;\n&quot; +
                       &quot;   font-weight: 400;\n&quot; +
                       &quot;   font-style:normal;\n&quot; +
                       &quot;   font-family: \&quot;Roboto\&quot;, helvetica, arial, sans-serif;\n&quot; +
                       &quot;   text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;\n&quot; +
                       &quot;/*** Table Styles **/\n&quot; +
                       &quot;\n&quot; +
                       &quot;.table-fill {\n&quot; +
                       &quot;  background: white;\n&quot; +
                       &quot;  border-radius:3px;\n&quot; +
                       &quot;  border-collapse: collapse;\n&quot; +
                       &quot;  height: 0px;\n&quot; +
                       &quot;  margin: auto;\n&quot; +
                       &quot;  max-width: 800px;\n&quot; +
                       &quot;  padding:5px;\n&quot; +
                       &quot;  width: 100%;\n&quot; +
                       &quot;  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n&quot; +
                       &quot;  animation: float 5s infinite;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;th {\n&quot; +
                       &quot;  color:#D5DDE5;;\n&quot; +
                       &quot;  background:#1b1e24;\n&quot; +
                       &quot;  border-bottom:4px solid #9ea7af;\n&quot; +
                       &quot;  border-right: 1px solid #343a45;\n&quot; +
                       &quot;  font-size:16px;\n&quot; +
                       &quot;  font-weight: 100;\n&quot; +
                       &quot;  padding:18px;\n&quot; +
                       &quot;  text-align:center;\n&quot; +
                       &quot;  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\n&quot; +
                       &quot;  vertical-align:middle;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;th:first-child {\n&quot; +
                       &quot;  border-top-left-radius:3px;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;th:last-child {\n&quot; +
                       &quot;  border-top-right-radius:3px;\n&quot; +
                       &quot;  border-right:none;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;  \n&quot; +
                       &quot;tr {\n&quot; +
                       &quot;  border-top: 1px solid #C1C3D1;\n&quot; +
                       &quot;  border-bottom-: 1px solid #C1C3D1;\n&quot; +
                       &quot;  color:#666B85;\n&quot; +
                       &quot;  font-size:16px;\n&quot; +
                       &quot;  font-weight:normal;\n&quot; +
                       &quot;  text-shadow: 0 1px 1px rgba(256, 256, 256, 0.1);\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;tr:hover td {\n&quot; +
                       &quot;  background:#4E5066;\n&quot; +
                       &quot;  color:#FFFFFF;\n&quot; +
                       &quot;  border-top: 1px solid #22262e;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;tr:first-child {\n&quot; +
                       &quot;  border-top:none;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;tr:last-child {\n&quot; +
                       &quot;  border-bottom:none;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;tr:nth-child(odd) td {\n&quot; +
                       &quot;  background:#EBEBEB;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;tr:nth-child(odd):hover td {\n&quot; +
                       &quot;  background:#4E5066;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;tr:last-child td:first-child {\n&quot; +
                       &quot;  border-bottom-left-radius:3px;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;tr:last-child td:last-child {\n&quot; +
                       &quot;  border-bottom-right-radius:3px;\n&quot; +
                       &quot;}\n&quot; +
                       &quot; \n&quot; +
                       &quot;td {\n&quot; +
                       &quot;  background:#FFFFFF;\n&quot; +
                       &quot;  padding:6px;\n&quot; +
                       &quot;  text-align:center;\n&quot; +
                       &quot;  vertical-align:middle;\n&quot; +
                       &quot;  font-weight:300;\n&quot; +
                       &quot;  font-size:16px;\n&quot; +
                       &quot;  text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);\n&quot; +
                       &quot;  border-right: 1px solid #C1C3D1;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;td:last-child {\n&quot; +
                       &quot;  border-right: 0px;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;th.text-center {\n&quot; +
                       &quot;  text-align: center;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;th.text-left {\n&quot; +
                       &quot;  text-align: left;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;th.text-right {\n&quot; +
                       &quot;  text-align: right;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;td.text-center {\n&quot; +
                       &quot;  text-align: center;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;td.text-center {\n&quot; +
                       &quot;  text-align: center;\n&quot; +
                       &quot;}\n&quot; +
                       &quot;\n&quot; +
                       &quot;td.text-right {\n&quot; +
                       &quot;  text-align: right;\n&quot; +
                       &quot;}\n\n&quot;;


String headerPart =&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot; +
                           &quot;   &lt;head&gt;\n&quot; +
                           &quot;&lt;style&gt;\n&quot;+
                           style +
                           &quot;      &lt;meta charset=\&quot;utf-8\&quot; /&gt;\n&quot; +
                           &quot;      &lt;title&gt;Table Style&lt;/title&gt;\n&quot; +
                           &quot;      &lt;meta name=\&quot;viewport\&quot; content=\&quot;initial-scale=1.0; maximum-scale=1.0; width=device-width;\&quot;&gt;\n&quot; +
                           &quot;      &lt;/style&gt;&quot;+
                           &quot;   &lt;/head&gt;\n&quot; +
                           &quot;   &lt;body&gt;\n&quot; +
                           &quot;      &lt;div class=\&quot;table-title\&quot;&gt;\n&quot; +
                           &quot;         &lt;h3&gt;Total workspaces tested in parallel threads: &quot; + numberOfThreads + &quot; &lt;/h3&gt;\n&quot; +
                           &quot;      &lt;/div&gt;\n&quot; +
                           &quot;      &lt;table class=\&quot;table-fill\&quot;&gt;\n&quot; +
                           &quot;      &lt;thead&gt;&quot;;

String titleHtmlContent = &quot;&lt;tr&gt;\n&quot; +
                                  &quot;   &lt;th class=\&quot;text-left\&quot;&gt;Average workspace creation value in sec.:: &lt;/th&gt;\n&quot; +
                                  &quot;   &lt;th class=\&quot;text-left\&quot;&gt;Minimum workspace creation value in sec.: &lt;/th&gt;\n&quot; +
                                  &quot;   &lt;th class=\&quot;text-left\&quot;&gt;Maximum workspace creation value in sec.: &lt;/th&gt;\n&quot; +
                                  &quot;&lt;/tr&gt;\n&quot; +
                                  &quot;&lt;/thead&gt;\n&quot; +
                                  &quot;&lt;tbody class=\&quot;table-hover\&quot;&gt;&quot;;

String columnForDataPart = &quot;&lt;tr&gt;\n&quot; +
                                   &quot;   &lt;td class=\&quot;text-left\&quot;&gt;%s&lt;/td&gt;\n&quot; +
                                   &quot;   &lt;td class=\&quot;text-left\&quot;&gt;%s&lt;/td&gt;\n&quot; +
                                   &quot;   &lt;td class=\&quot;text-left\&quot;&gt;%s&lt;/td&gt;\n&quot; +
                                   &quot;&lt;/tr&gt;\n&quot;;


String closingSection = &quot;&lt;/tbody&gt;\n&quot; +
                                &quot;&lt;/table&gt;\n&quot; +
                                &quot;&lt;/body&gt;&quot; +
                                &quot;&lt;div style=&apos;margin:auto; max-width: 800px; padding: 20px; color:#e6eeff&apos;&gt;&quot; +
                                &quot;host: &quot; + host +  
                                &quot;&lt;/div&gt;&quot; + 
                                &quot;&lt;div style=&apos;margin:auto; max-width: 800px; padding: 20px; font-size:10px; color:#e6eeff&apos;&gt;&quot; + date +&quot;&lt;/div&gt;&quot;
                                &quot;&lt;/html&gt;&quot;;

for (int i = 1; i &lt;=Integer.parseInt(numberOfThreads); i++) {
            values.add(Integer.valueOf(props.get(&quot;WS_TIME_CREATION_BY_USER_&quot;+String.valueOf(i))));
		}
        
for (Integer val: values) {
            sum += val;
	     }

stringBuilder.append(headerPart)
             .append(titleHtmlContent)
             .append(
              String.format(
              columnForDataPart, 
              String.valueOf(sum/Integer.parseInt(numberOfThreads)), 
              String.valueOf(Collections.min(values)), 
              String.valueOf(Collections.max(values))))
              .append(closingSection)
              .toString();

String defaultPathToHtmlReport = &quot;workspace-time-creation.html&quot;

FileWriter fileWriter = new FileWriter(defaultPathToHtmlReport, false);

	fileWriter.append(stringBuilder.toString())
	fileWriter.flush();
	fileWriter.close();                              </stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
